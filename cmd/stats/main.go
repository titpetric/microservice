package main

// file is autogenerated, do not modify here, see
// generator and template: templates/cmd_main.go.tpl

import (
	"log"

	"net/http"

	"github.com/SentimensRG/sigctx"
	"github.com/namsral/flag"

	"github.com/titpetric/microservice/db"
	"github.com/titpetric/microservice/internal"
	"github.com/titpetric/microservice/rpc/stats"
	server "github.com/titpetric/microservice/server/stats"
)

func main() {
	var config struct {
		migrate   bool
		migrateDB db.ConnectionOptions
	}
	flag.StringVar(&config.migrateDB.Credentials.Driver, "migrate-db-driver", "mysql", "Migrations: Database driver")
	flag.StringVar(&config.migrateDB.Credentials.DSN, "migrate-db-dsn", "", "Migrations: DSN for database connection")
	flag.BoolVar(&config.migrate, "migrate", false, "Run migrations?")
	flag.Parse()

	ctx := sigctx.New()

	if config.migrate {
		handle, err := db.ConnectWithRetry(ctx, config.migrateDB)
		if err != nil {
			log.Fatalf("Error connecting to database: %+v", err)
		}
		if err := db.Run("stats", handle); err != nil {
			log.Fatalf("An error occurred: %+v", err)
		}
	}

	srv, err := server.New(ctx)
	if err != nil {
		log.Fatalf("Error in service.New(): %+v", err)
	}

	twirpHandler := stats.NewStatsServiceServer(srv, internal.NewServerHooks())

	log.Println("Starting service on port :3000")
	go func() {
		err := http.ListenAndServe(":3000", internal.WrapAll(twirpHandler))
		if err != http.ErrServerClosed {
			log.Println("Server error:", err)
		}
	}()
	<-ctx.Done()

	srv.Shutdown()
	log.Println("Done.")
}
